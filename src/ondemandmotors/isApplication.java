/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ondemandmotors;

import java.awt.Desktop;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 
 */
public class isApplication extends javax.swing.JFrame {

    /** Creates new form isApplication */
    public isApplication(String location, String path) {
        this.location = location;
        this.path = path;
        initComponents();
        loadRecords();
        loadImage("image\\bikecar.jpg");
    }
    
    String searchCriteria[] = new String[7];
    String sortCriteria = "ascending";
    String location;
    String path;
    ArrayList<ArrayList<String>> records = new ArrayList<ArrayList<String>>();
    ArrayList<ArrayList<String>> searchResult = new ArrayList<ArrayList<String>>();

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vehicleType = new javax.swing.ButtonGroup();
        vehicleCategory = new javax.swing.ButtonGroup();
        priceRange = new javax.swing.ButtonGroup();
        condition = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        carOption = new javax.swing.JRadioButton();
        bikeOption = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        sportsOption = new javax.swing.JCheckBox();
        adventureOption = new javax.swing.JCheckBox();
        cityOption = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        thirtylakhplus = new javax.swing.JRadioButton();
        fivelakh = new javax.swing.JRadioButton();
        twentylakh = new javax.swing.JRadioButton();
        tenlakh = new javax.swing.JRadioButton();
        thirtylakh = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        horsePower = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        releaseYear = new javax.swing.JComboBox<>();
        usedOption = new javax.swing.JRadioButton();
        newOption = new javax.swing.JRadioButton();
        noOfSearchResults = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        price = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOfVehicle = new javax.swing.JTable();
        imageDisplay = new javax.swing.JLabel();
        menuBarIS = new javax.swing.JMenuBar();
        fileMenuIS = new javax.swing.JMenu();
        home = new javax.swing.JMenuItem();
        seperatorIS = new javax.swing.JPopupMenu.Separator();
        exitIS = new javax.swing.JMenuItem();
        helpMenuIS = new javax.swing.JMenu();
        documentIS = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("On Demand Motors");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText(location + " Showroom");

        searchBar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        vehicleType.add(carOption);
        carOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        carOption.setText("Car");
        carOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carOptionActionPerformed(evt);
            }
        });

        vehicleType.add(bikeOption);
        bikeOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bikeOption.setText("Bike");
        bikeOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bikeOptionActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Category:");

        vehicleCategory.add(sportsOption);
        sportsOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sportsOption.setText("Sport");
        sportsOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsOptionActionPerformed(evt);
            }
        });

        vehicleCategory.add(adventureOption);
        adventureOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        adventureOption.setText("Adventure");
        adventureOption.setActionCommand("Adv");
        adventureOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adventureOptionActionPerformed(evt);
            }
        });

        vehicleCategory.add(cityOption);
        cityOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cityOption.setText("City");
        cityOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityOptionActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setText("Price Range (NRS):");

        priceRange.add(thirtylakhplus);
        thirtylakhplus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        thirtylakhplus.setText("3,000,000+");
        thirtylakhplus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirtylakhplusActionPerformed(evt);
            }
        });

        priceRange.add(fivelakh);
        fivelakh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fivelakh.setText("0 - 500,000");
        fivelakh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fivelakhActionPerformed(evt);
            }
        });

        priceRange.add(twentylakh);
        twentylakh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        twentylakh.setText("1,000,000 - 2,000,000");
        twentylakh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twentylakhActionPerformed(evt);
            }
        });

        priceRange.add(tenlakh);
        tenlakh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tenlakh.setText("500,000 - 1,000,000");
        tenlakh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tenlakhActionPerformed(evt);
            }
        });

        priceRange.add(thirtylakh);
        thirtylakh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        thirtylakh.setText("2,000,000 - 3,000,000");
        thirtylakh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirtylakhActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("HP: ");

        horsePower.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        horsePower.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "0 - 50", "50 - 100", "100 - 150", "150 - 200", "200+" }));
        horsePower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horsePowerActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Release Year: ");

        releaseYear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        releaseYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016+" }));
        releaseYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseYearActionPerformed(evt);
            }
        });

        condition.add(usedOption);
        usedOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        usedOption.setText("Used");
        usedOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usedOptionActionPerformed(evt);
            }
        });

        condition.add(newOption);
        newOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        newOption.setText("New");
        newOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOptionActionPerformed(evt);
            }
        });

        noOfSearchResults.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        noOfSearchResults.setText("0");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Search Results Found:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Sort by(Price):");

        price.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        price.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        tableOfVehicle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tableOfVehicle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "ID", "Name", "Type", "Category", "Company", "Model", "Year", "Price", "HP", "Condition"
            }
        ));
        tableOfVehicle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOfVehicleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableOfVehicle);

        fileMenuIS.setText("File");

        home.setText("Home");
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        fileMenuIS.add(home);
        fileMenuIS.add(seperatorIS);

        exitIS.setText("Exit");
        exitIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitISActionPerformed(evt);
            }
        });
        fileMenuIS.add(exitIS);

        menuBarIS.add(fileMenuIS);

        helpMenuIS.setText("Help");

        documentIS.setText("Documentation");
        documentIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                documentISActionPerformed(evt);
            }
        });
        helpMenuIS.add(documentIS);

        menuBarIS.add(helpMenuIS);

        setJMenuBar(menuBarIS);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(noOfSearchResults)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addGap(167, 167, 167)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(sportsOption)
                                .addGap(18, 18, 18)
                                .addComponent(adventureOption)
                                .addGap(18, 18, 18)
                                .addComponent(cityOption))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(carOption)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(searchButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(clearButton))
                                    .addComponent(bikeOption)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(horsePower, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(releaseYear, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(usedOption)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(newOption)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(twentylakh)
                            .addComponent(thirtylakh)
                            .addComponent(thirtylakhplus)
                            .addComponent(fivelakh)
                            .addComponent(tenlakh)
                            .addComponent(jLabel3))
                        .addGap(115, 115, 115))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(imageDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
            .addGroup(layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(jLabel1)
                .addGap(98, 98, 98))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearButton)
                            .addComponent(searchBar))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(carOption)
                            .addComponent(jLabel2)
                            .addComponent(adventureOption)
                            .addComponent(cityOption)
                            .addComponent(sportsOption))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bikeOption)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(horsePower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(releaseYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usedOption)
                            .addComponent(newOption))
                        .addGap(40, 40, 40))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(noOfSearchResults)
                        .addComponent(jLabel8)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fivelakh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tenlakh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(twentylakh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thirtylakh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thirtylakhplus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(imageDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainMenuForm().setVisible(true);
            }
        });
        dispose();
    }//GEN-LAST:event_homeActionPerformed

    private void documentISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_documentISActionPerformed
        //open the pdf file located in data/help.pdf
        try{
            File file = new File("data\\help.pdf");
            //Open the file if it exists
            if(file.exists()){
                if(Desktop.isDesktopSupported()){
                    Desktop.getDesktop().open(file);
                } else {
                    JOptionPane.showMessageDialog(this, "Not supported");
                }
            } else{
                JOptionPane.showMessageDialog(this, "File does not exist");
            }
            
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_documentISActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        if(searchBar.getText().trim().length() != 0){
            searchCriteria[0] = searchBar.getText().toLowerCase().trim();
        }
        for(int i=0; i<searchCriteria.length; i++){
            if(searchCriteria[i] == null){
                searchCriteria[i] = "all";
            }
        }
        applyFilters();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void sportsOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsOptionActionPerformed
        // TODO add your handling code here:
        searchCriteria[2] = "sport";
    }//GEN-LAST:event_sportsOptionActionPerformed

    private void fivelakhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fivelakhActionPerformed
        // TODO add your handling code here:
        searchCriteria[6] = fivelakh.getText().toLowerCase().trim();
    }//GEN-LAST:event_fivelakhActionPerformed

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here:
        searchCriteria[0] = searchBar.getText().toLowerCase().trim();
    }//GEN-LAST:event_searchBarActionPerformed

    private void carOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carOptionActionPerformed
        // TODO add your handling code here:
        searchCriteria[1] = "car";
    }//GEN-LAST:event_carOptionActionPerformed

    private void bikeOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bikeOptionActionPerformed
        // TODO add your handling code here:
        searchCriteria[1] = "bike";
    }//GEN-LAST:event_bikeOptionActionPerformed

    private void horsePowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horsePowerActionPerformed
        // TODO add your handling code here:
        searchCriteria[3] = horsePower.getSelectedItem().toString().toLowerCase().trim();
    }//GEN-LAST:event_horsePowerActionPerformed

    private void releaseYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseYearActionPerformed
        // TODO add your handling code here:
        searchCriteria[4] = releaseYear.getSelectedItem().toString().toLowerCase().trim();
    }//GEN-LAST:event_releaseYearActionPerformed

    private void usedOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usedOptionActionPerformed
        // TODO add your handling code here:
        searchCriteria[5] = "used";
    }//GEN-LAST:event_usedOptionActionPerformed

    private void newOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOptionActionPerformed
        // TODO add your handling code here:
        searchCriteria[5] = "new";
    }//GEN-LAST:event_newOptionActionPerformed

    private void adventureOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adventureOptionActionPerformed
        // TODO add your handling code here:
        searchCriteria[2] = "adv";
    }//GEN-LAST:event_adventureOptionActionPerformed

    private void cityOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityOptionActionPerformed
        // TODO add your handling code here:
        searchCriteria[2] = "city";
    }//GEN-LAST:event_cityOptionActionPerformed

    private void tenlakhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tenlakhActionPerformed
        // TODO add your handling code here:
        searchCriteria[6] = tenlakh.getText().toLowerCase().trim();
    }//GEN-LAST:event_tenlakhActionPerformed

    private void twentylakhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twentylakhActionPerformed
        // TODO add your handling code here:
        searchCriteria[6] = twentylakh.getText().toLowerCase().trim();
    }//GEN-LAST:event_twentylakhActionPerformed

    private void thirtylakhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirtylakhActionPerformed
        // TODO add your handling code here:
        searchCriteria[6] = thirtylakh.getText().toLowerCase().trim();
    }//GEN-LAST:event_thirtylakhActionPerformed

    private void thirtylakhplusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirtylakhplusActionPerformed
        // TODO add your handling code here:
        searchCriteria[6] = thirtylakhplus.getText().toLowerCase().trim();
    }//GEN-LAST:event_thirtylakhplusActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
        sortCriteria = price.getSelectedItem().toString().toLowerCase().trim();
    }//GEN-LAST:event_priceActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        searchBar.setText("");
        vehicleType.clearSelection();
        vehicleCategory.clearSelection();
        horsePower.setSelectedIndex(0);
        releaseYear.setSelectedIndex(0);
        price.setSelectedIndex(0);
        condition.clearSelection();
        priceRange.clearSelection();
        
        for(int i=0; i<searchCriteria.length; i++){
                searchCriteria[i] = "all";
        }
        sortCriteria = "ascending";
        DefaultTableModel model = (DefaultTableModel)tableOfVehicle.getModel();
        model.setRowCount(0);
        noOfSearchResults.setText(0 + "");
        loadImage("image\\bikecar.jpg");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void exitISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitISActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exitISActionPerformed

    private void tableOfVehicleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOfVehicleMouseClicked
        //Select image according to row
        int rowPosition = tableOfVehicle.getSelectedRow();
        
        String imgPath = searchResult.get(rowPosition).get(10).trim();
        loadImage(imgPath);
    }//GEN-LAST:event_tableOfVehicleMouseClicked

    public void loadImage(String imgPath){
        
        ImageIcon imageIcon = new ImageIcon(imgPath); // load the image to a imageIcon
        Image image = imageIcon.getImage(); // transform it 
        Image newimg = image.getScaledInstance(200, 200,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
        imageIcon = new ImageIcon(newimg);
        imageDisplay.setIcon(imageIcon);
    }
    
    
    public void loadRecords(){
        String[] temp = new String[11];
        String line = "";
        BufferedReader br = null;
        
        try {
            br = new BufferedReader(new FileReader(path));
            int i = 0;
            while((line = br.readLine()) != null){
                if(i >= 1){
                    temp = line.split(",");
                    if(temp.length == 11){
                        records.add(new ArrayList<String>(Arrays.asList(temp)));
                    }
                }
                i++;
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
        
        applySort(records, "ascending");
    }
    
    
    /*Apply Filters*/
    public void applyFilters(){
        priceFilter();
        nameFilter();
        vehicleTypeFilter();
        categoryFilter();
        hpFilter();
        yearFilter();
        conditionFilter();
        applySort(searchResult, sortCriteria);
        updateTable();
    }
    
    public void applySort(ArrayList<ArrayList<String>> list,String sort){
        
        int val;
        
        for(int i=0; i<list.size(); i++){
            val = Integer.parseInt(list.get(i).get(7).trim());
            int posNewVal = i;
            
            for(int j=i+1; j<list.size(); j++){
                int b = Integer.parseInt(list.get(j).get(7).trim());
                
                //Sorts in ascending
                if(sort.equals("ascending")){
                    if(b < val){
                        val = b;
                        posNewVal = j;
                    }
                }
                //Sorts in descending
                else {
                    if(b > val){
                        val = b;
                        posNewVal = j;
                    }
                }
            }
            //Swap i == swapB? notswap: swap;
            if(i != posNewVal){
                ArrayList<String> temp = list.get(i);
                list.set(i, list.get(posNewVal));
                list.set(posNewVal, temp);
            }
        }
    }
    
    public void nameFilter(){
        if(!searchCriteria[0].equals("all")){
            Iterator<ArrayList<String>> it = searchResult.iterator();
            
            while(it.hasNext()){
                ArrayList<String> data = it.next();
                String name = data.get(1).toLowerCase().trim();
                if(!name.equals(searchCriteria[0])){
                    it.remove();
                }
            }
        }
        
        if((searchResult.size() == 0) && !searchCriteria[0].equals("all") ){
            JOptionPane.showMessageDialog(null,"no Result Found for " + searchCriteria[0], "Alert",JOptionPane.INFORMATION_MESSAGE);
            searchResult = (ArrayList<ArrayList<String>>)records.clone();
        } 
    }
    
    public void vehicleTypeFilter(){
        if(!searchCriteria[1].equals("all")){
            Iterator<ArrayList<String>> it = searchResult.iterator();

            while(it.hasNext()){
                ArrayList<String> data = it.next();
                String type = data.get(2).toLowerCase().trim();
                if(!type.equals(searchCriteria[1])){
                    it.remove();
                }
            }
        }
    }
    
    public void categoryFilter(){
        if(!searchCriteria[2].equals("all")){
            Iterator<ArrayList<String>> it = searchResult.iterator();

            while(it.hasNext()){
                ArrayList<String> data = it.next();
                String type = data.get(3).toLowerCase().trim();
                if(!type.equals(searchCriteria[2])){
                    it.remove();
                }
            }
        }
    }
    
    public void hpFilter(){
        if(!searchCriteria[3].equals("all")){
            Iterator<ArrayList<String>> it = searchResult.iterator();

            while(it.hasNext()){
                ArrayList<String> data = it.next();
                int hp =Integer.parseInt(data.get(8).toLowerCase().trim());
                
                switch(searchCriteria[3]){
                    case "0 - 50" -> {
                        if(!(hp >= 0 && hp<50)){
                            it.remove();
                        }
                    }
                    case "50 - 100" -> {
                        if(!(hp >= 50 && hp<100)){
                            it.remove();
                        }
                    }
                    case "100 - 150" -> {
                        if(!(hp >= 100 && hp<150)){
                            it.remove();
                        }
                    }
                    case "150 - 200" -> {
                        if(!(hp >= 150 && hp<200)){
                            it.remove();
                        }
                    }
                    case "200+" -> {
                        if(!(hp >= 200)){
                            it.remove();
                        }
                    }
                }
            }
        }
    }
    
    
    public void yearFilter(){
        if(!searchCriteria[4].equals("all")){
            Iterator<ArrayList<String>> it = searchResult.iterator();

            while(it.hasNext()){
                ArrayList<String> data = it.next();
                int year = Integer.parseInt(data.get(6).toLowerCase().trim());
                
                if(searchCriteria[4].equals("2016+")){
                    if(!(year >= 2016)){
                        it.remove();
                    }
                } else if(Integer.parseInt(searchCriteria[4]) != year){
                    it.remove();
                }
            }
        }
    }
    
    public void conditionFilter(){
        if(!searchCriteria[5].equals("all")){
            Iterator<ArrayList<String>> it = searchResult.iterator();

            while(it.hasNext()){
                ArrayList<String> data = it.next();
                String newUsed = data.get(9).toLowerCase().trim();
                if(!newUsed.equals(searchCriteria[5])){
                    it.remove();
                }
            }
        }
    }
    
    public void priceFilter(){
        if(searchCriteria[6].equals("all")){
            searchResult = (ArrayList<ArrayList<String>>)records.clone();
        }
        else{
            int start = 0;
            int end = records.size() - 1;
            int mid;

            while(start <= end){
                mid = (start + end)/2;
                int price =Integer.parseInt(records.get(mid).get(7).trim());
                
                //--------- Start of Switch ---------
                switch(searchCriteria[6]){
                    case "0 - 500,000" -> {
                        if( (price >= 0) && (price < 500000) ){
                            filter(start, end);
                            return;
                        }
                        else if(500000 < price) {
                            end = mid - 1;
                        }else if(0 > price) {
                            start = mid + 1;
                        }
                    }
                    case "500,000 - 1,000,000" -> {
                        if( (price >= 500000) && (price < 1000000) ){
                            filter(start, end);
                            return;
                        }
                        else if(1000000 < price) {
                            end = mid - 1;
                        }else if(500000 > price) {
                            start = mid + 1;
                        }
                    }
                    case "1,000,000 - 2,000,000" -> {
                        if( (price >= 1000000) && (price < 2000000) ){
                            filter(start, end);
                            return;
                        }
                        else if(2000000 < price) {
                            end = mid - 1;
                        }else if(1000000 > price) {
                            start = mid + 1;
                        }
                    }
                    case "2,000,000 - 3,000,000" -> {
                        if( (price >= 2000000) && (price < 3000000) ){
                            filter(start, end);
                            return;
                        }
                        else if(3000000 < price) {
                            end = mid - 1;
                        }else if(2000000 > price) {
                            start = mid + 1;
                        }
                    }
                    case "3,000,000+" -> {
                        if( (price >= 3000000) ){
                            filter(start, end);
                            return;
                        }else if(3000000 > price) {
                            start = mid + 1;
                        }
                    }
                }
            }
        }
    }
    
    //This method is only used by price filter to make it's work easy
    public void filter(int start, int end){
        searchResult.clear();
        for(int i=start; i<=end; i++){
            int price =Integer.parseInt(records.get(i).get(7).trim());
            switch(searchCriteria[6]){
                case "0 - 500,000" -> {
                    if( (price >= 0) && (price < 500000) ){
                        searchResult.add(records.get(i));
                    }
                }
                case "500,000 - 1,000,000" -> {
                    if( (price >= 500000) && (price < 1000000) ){
                        searchResult.add(records.get(i));
                    }
                }
                case "1,000,000 - 2,000,000" -> {
                    if( (price >= 1000000) && (price < 2000000) ){
                        searchResult.add(records.get(i));
                    }
                }
                case "2,000,000 - 3,000,000" -> {
                    if( (price >= 2000000) && (price < 3000000) ){
                        searchResult.add(records.get(i));
                    }
                }
                case "3,000,000+" -> {
                    if( (price > 3000000) ){
                        searchResult.add(records.get(i));
                    }
                }
            }
        }
    }
    
    
    //Updating Table
    public void updateTable(){
        int rows = searchResult.size();
        noOfSearchResults.setText(rows + "");
                
        DefaultTableModel model = (DefaultTableModel)tableOfVehicle.getModel();
        model.setRowCount(0);
        Object rowData[] = new Object[10];
        for(ArrayList<String> arry: searchResult){
            rowData = (arry.subList(0, 10)).toArray();
            model.addRow(rowData);
        }
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox adventureOption;
    private javax.swing.JRadioButton bikeOption;
    private javax.swing.JRadioButton carOption;
    private javax.swing.JCheckBox cityOption;
    private javax.swing.JButton clearButton;
    private javax.swing.ButtonGroup condition;
    private javax.swing.JMenuItem documentIS;
    private javax.swing.JMenuItem exitIS;
    private javax.swing.JMenu fileMenuIS;
    private javax.swing.JRadioButton fivelakh;
    private javax.swing.JMenu helpMenuIS;
    private javax.swing.JMenuItem home;
    private javax.swing.JComboBox<String> horsePower;
    private javax.swing.JLabel imageDisplay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBarIS;
    private javax.swing.JRadioButton newOption;
    private javax.swing.JLabel noOfSearchResults;
    private javax.swing.JComboBox<String> price;
    private javax.swing.ButtonGroup priceRange;
    private javax.swing.JComboBox<String> releaseYear;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JPopupMenu.Separator seperatorIS;
    private javax.swing.JCheckBox sportsOption;
    private javax.swing.JTable tableOfVehicle;
    private javax.swing.JRadioButton tenlakh;
    private javax.swing.JRadioButton thirtylakh;
    private javax.swing.JRadioButton thirtylakhplus;
    private javax.swing.JRadioButton twentylakh;
    private javax.swing.JRadioButton usedOption;
    private javax.swing.ButtonGroup vehicleCategory;
    private javax.swing.ButtonGroup vehicleType;
    // End of variables declaration//GEN-END:variables

}
